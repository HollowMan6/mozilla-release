Index: mozilla/security/nss/lib/nss/utilwrap.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/nss/utilwrap.c,v
retrieving revision 1.7
diff -u -8 -p -r1.7 utilwrap.c
--- mozilla/security/nss/lib/nss/utilwrap.c	25 Apr 2012 14:50:04 -0000	1.7
+++ mozilla/security/nss/lib/nss/utilwrap.c	27 Nov 2012 03:08:28 -0000
@@ -642,17 +642,17 @@ char *BTOA_DataToAscii(const unsigned ch
     return BTOA_DataToAscii_Util(data, len);
 }
 
 unsigned char *ATOB_AsciiToData(const char *string, unsigned int *lenp)
 {
     return ATOB_AsciiToData_Util(string, lenp);
 }
  
-SECStatus ATOB_ConvertAsciiToItem(SECItem *binary_item, char *ascii)
+SECStatus ATOB_ConvertAsciiToItem(SECItem *binary_item, const char *ascii)
 {
     return ATOB_ConvertAsciiToItem_Util(binary_item, ascii);
 }
 
 char *BTOA_ConvertItemToAscii(SECItem *binary_item)
 {
     return BTOA_ConvertItemToAscii_Util(binary_item);
 }
Index: mozilla/security/nss/lib/pk11wrap/pk11cxt.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pk11wrap/pk11cxt.c,v
retrieving revision 1.9
diff -u -8 -p -r1.9 pk11cxt.c
--- mozilla/security/nss/lib/pk11wrap/pk11cxt.c	25 Apr 2012 14:50:04 -0000	1.9
+++ mozilla/security/nss/lib/pk11wrap/pk11cxt.c	27 Nov 2012 03:08:28 -0000
@@ -587,17 +587,17 @@ SECStatus PK11_DigestBegin(PK11Context *
     if (rv != SECSuccess) {
 	return SECFailure;
     }
     cx->init = PR_TRUE;
     return SECSuccess;
 }
 
 SECStatus
-PK11_HashBuf(SECOidTag hashAlg, unsigned char *out, unsigned char *in, 
+PK11_HashBuf(SECOidTag hashAlg, unsigned char *out, const unsigned char *in,
 								PRInt32 len) {
     PK11Context *context;
     unsigned int max_length;
     unsigned int out_length;
     SECStatus rv;
 
     /* len will be passed to PK11_DigestOp as unsigned. */
     if (len < 0) {
@@ -632,17 +632,17 @@ PK11_HashBuf(SECOidTag hashAlg, unsigned
 }
 
 
 /*
  * execute a bulk encryption operation
  */
 SECStatus
 PK11_CipherOp(PK11Context *context, unsigned char * out, int *outlen, 
-				int maxout, unsigned char *in, int inlen)
+				int maxout, const unsigned char *in, int inlen)
 {
     CK_RV crv = CKR_OK;
     CK_ULONG length = maxout;
     CK_ULONG offset =0;
     SECStatus rv = SECSuccess;
     unsigned char *saveOut = out;
     unsigned char *allocOut = NULL;
 
@@ -682,34 +682,36 @@ PK11_CipherOp(PK11Context *context, unsi
 		random,sizeof(random),out,&length);
 
 	    out += length;
 	    maxout -= length;
 	    offset = length;
 	} else if (context->operation == CKA_DECRYPT) {
 	    length = sizeof(random);
 	    crv = PK11_GETTAB(context->slot)->C_DecryptUpdate(context->session,
-		in,sizeof(random),random,&length);
+		(CK_BYTE_PTR)in,sizeof(random),random,&length);
 	    inlen -= length;
 	    in += length;
 	    context->fortezzaHack = PR_FALSE;
 	}
     }
 
     switch (context->operation) {
     case CKA_ENCRYPT:
 	length = maxout;
 	crv=PK11_GETTAB(context->slot)->C_EncryptUpdate(context->session,
-						in, inlen, out, &length);
+							(CK_BYTE_PTR)in, inlen,
+							out, &length);
 	length += offset;
 	break;
     case CKA_DECRYPT:
 	length = maxout;
 	crv=PK11_GETTAB(context->slot)->C_DecryptUpdate(context->session,
-						in, inlen, out, &length);
+							(CK_BYTE_PTR)in, inlen,
+							out, &length);
 	break;
     default:
 	crv = CKR_OPERATION_NOT_INITIALIZED;
 	break;
     }
 
     if (crv != CKR_OK) {
         PORT_SetError( PK11_MapError(crv) );
Index: mozilla/security/nss/lib/pk11wrap/pk11obj.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pk11wrap/pk11obj.c,v
retrieving revision 1.28
diff -u -8 -p -r1.28 pk11obj.c
--- mozilla/security/nss/lib/pk11wrap/pk11obj.c	16 Nov 2012 13:02:39 -0000	1.28
+++ mozilla/security/nss/lib/pk11wrap/pk11obj.c	27 Nov 2012 03:08:28 -0000
@@ -595,18 +595,18 @@ pk11_FindAttrInTemplate(CK_ATTRIBUTE *at
     return PR_FALSE;
 }
 	
 /*
  * Recover the Signed data. We need this because our old verify can't
  * figure out which hash algorithm to use until we decryptted this.
  */
 SECStatus
-PK11_VerifyRecover(SECKEYPublicKey *key,
-			 	SECItem *sig, SECItem *dsig, void *wincx)
+PK11_VerifyRecover(SECKEYPublicKey *key, const SECItem *sig,
+		   SECItem *dsig, void *wincx)
 {
     PK11SlotInfo *slot = key->pkcs11Slot;
     CK_OBJECT_HANDLE id = key->pkcs11ID;
     CK_MECHANISM mech = {0, NULL, 0 };
     PRBool owner = PR_TRUE;
     CK_SESSION_HANDLE session;
     CK_ULONG len;
     CK_RV crv;
@@ -655,17 +655,18 @@ PK11_VerifyRecover(SECKEYPublicKey *key,
     PK11_FreeSlot(slot);
     return SECSuccess;
 }
 
 /*
  * verify a signature from its hash.
  */
 SECStatus
-PK11_Verify(SECKEYPublicKey *key, SECItem *sig, SECItem *hash, void *wincx)
+PK11_Verify(SECKEYPublicKey *key, const SECItem *sig, const SECItem *hash,
+	    void *wincx)
 {
     PK11SlotInfo *slot = key->pkcs11Slot;
     CK_OBJECT_HANDLE id = key->pkcs11ID;
     CK_MECHANISM mech = {0, NULL, 0 };
     PRBool owner = PR_TRUE;
     CK_SESSION_HANDLE session;
     CK_RV crv;
 
@@ -724,17 +725,17 @@ PK11_Verify(SECKEYPublicKey *key, SECIte
     }
     return SECSuccess;
 }
 
 /*
  * sign a hash. The algorithm is determined by the key.
  */
 SECStatus
-PK11_Sign(SECKEYPrivateKey *key, SECItem *sig, SECItem *hash)
+PK11_Sign(SECKEYPrivateKey *key, SECItem *sig, const SECItem *hash)
 {
     PK11SlotInfo *slot = key->pkcs11Slot;
     CK_MECHANISM mech = {0, NULL, 0 };
     PRBool owner = PR_TRUE;
     CK_SESSION_HANDLE session;
     PRBool haslock = PR_FALSE;
     CK_ULONG len;
     CK_RV crv;
Index: mozilla/security/nss/lib/pk11wrap/pk11pub.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pk11wrap/pk11pub.h,v
retrieving revision 1.41
diff -u -8 -p -r1.41 pk11pub.h
--- mozilla/security/nss/lib/pk11wrap/pk11pub.h	29 Jun 2012 17:46:25 -0000	1.41
+++ mozilla/security/nss/lib/pk11wrap/pk11pub.h	27 Nov 2012 03:08:28 -0000
@@ -653,43 +653,44 @@ CERTSignedCrl* PK11_ImportCRL(PK11SlotIn
  * Return the length in bytes of a signature generated with the
  * private key.
  *
  * Return 0 or -1 on failure.  (XXX Should we fix it to always return
  * -1 on failure?)
  */
 int PK11_SignatureLen(SECKEYPrivateKey *key);
 PK11SlotInfo * PK11_GetSlotFromPrivateKey(SECKEYPrivateKey *key);
-SECStatus PK11_Sign(SECKEYPrivateKey *key, SECItem *sig, SECItem *hash);
-SECStatus PK11_VerifyRecover(SECKEYPublicKey *key, SECItem *sig,
-						 SECItem *dsig, void * wincx);
-SECStatus PK11_Verify(SECKEYPublicKey *key, SECItem *sig, 
-						SECItem *hash, void *wincx);
+SECStatus PK11_Sign(SECKEYPrivateKey *key, SECItem *sig,
+		    const SECItem *hash);
+SECStatus PK11_VerifyRecover(SECKEYPublicKey *key, const SECItem *sig,
+			     SECItem *dsig, void * wincx);
+SECStatus PK11_Verify(SECKEYPublicKey *key, const SECItem *sig,
+		      const SECItem *hash, void *wincx);
 
 
 
 /**********************************************************************
  *                   Crypto Contexts
  **********************************************************************/
 void PK11_DestroyContext(PK11Context *context, PRBool freeit);
 PK11Context *PK11_CreateContextBySymKey(CK_MECHANISM_TYPE type,
 	CK_ATTRIBUTE_TYPE operation, PK11SymKey *symKey, SECItem *param);
 PK11Context *PK11_CreateDigestContext(SECOidTag hashAlg);
 PK11Context *PK11_CloneContext(PK11Context *old);
 SECStatus PK11_DigestBegin(PK11Context *cx);
 /*
  * The output buffer 'out' must be big enough to hold the output of
  * the hash algorithm 'hashAlg'.
  */
-SECStatus PK11_HashBuf(SECOidTag hashAlg, unsigned char *out, unsigned char *in,
-					PRInt32 len);
+SECStatus PK11_HashBuf(SECOidTag hashAlg, unsigned char *out,
+		       const unsigned char *in, PRInt32 len);
 SECStatus PK11_DigestOp(PK11Context *context, const unsigned char *in, 
                         unsigned len);
 SECStatus PK11_CipherOp(PK11Context *context, unsigned char * out, int *outlen, 
-				int maxout, unsigned char *in, int inlen);
+			int maxout, const unsigned char *in, int inlen);
 SECStatus PK11_Finalize(PK11Context *context);
 SECStatus PK11_DigestFinal(PK11Context *context, unsigned char *data, 
 				unsigned int *outLen, unsigned int length);
 SECStatus PK11_SaveContext(PK11Context *cx,unsigned char *save,
 						int *len, int saveLength);
 
 /* Save the context's state, with possible allocation.
  * The caller may supply an already allocated buffer in preAllocBuf,
Index: mozilla/security/nss/lib/pkcs7/p7decode.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs7/p7decode.c,v
retrieving revision 1.29
diff -u -8 -p -r1.29 p7decode.c
--- mozilla/security/nss/lib/pkcs7/p7decode.c	25 Apr 2012 14:50:06 -0000	1.29
+++ mozilla/security/nss/lib/pkcs7/p7decode.c	27 Nov 2012 03:08:28 -0000
@@ -1275,22 +1275,22 @@ SEC_PKCS7ContentIsSigned(SEC_PKCS7Conten
  * to encrypt the content.  So before we can pass the digest to VerifyDigest,
  * we need to decrypt it with the bulk encryption key.  Also, in this case,
  * there should be NO authenticatedAttributes (signerinfo->authAttr should
  * be NULL).
  */
 static PRBool
 sec_pkcs7_verify_signature(SEC_PKCS7ContentInfo *cinfo,
 			   SECCertUsage certusage,
-			   SECItem *detached_digest,
+			   const SECItem *detached_digest,
 			   HASH_HashType digest_type,
 			   PRBool keepcerts)
 {
     SECAlgorithmID **digestalgs, *bulkid;
-    SECItem *digest;
+    const SECItem *digest;
     SECItem **digests;
     SECItem **rawcerts;
     CERTSignedCrl **crls;
     SEC_PKCS7SignerInfo **signerinfos, *signerinfo;
     CERTCertificate *cert, **certs;
     PRBool goodsig;
     CERTCertDBHandle *certdb, *defaultdb; 
     SECOidTag encTag,digestTag;
@@ -1769,17 +1769,17 @@ SEC_PKCS7VerifySignature(SEC_PKCS7Conten
  *	for the purpose specified by "certusage".
  *
  *	In addition, if "keepcerts" is true, add any new certificates found
  *	into our local database.
  */
 PRBool
 SEC_PKCS7VerifyDetachedSignature(SEC_PKCS7ContentInfo *cinfo,
 				 SECCertUsage certusage,
-				 SECItem *detached_digest,
+				 const SECItem *detached_digest,
 				 HASH_HashType digest_type,
 				 PRBool keepcerts)
 {
     return sec_pkcs7_verify_signature (cinfo, certusage,
 				       detached_digest, digest_type,
 				       keepcerts);
 }
 
Index: mozilla/security/nss/lib/pkcs7/secpkcs7.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs7/secpkcs7.h,v
retrieving revision 1.9
diff -u -8 -p -r1.9 secpkcs7.h
--- mozilla/security/nss/lib/pkcs7/secpkcs7.h	25 Apr 2012 14:50:06 -0000	1.9
+++ mozilla/security/nss/lib/pkcs7/secpkcs7.h	27 Nov 2012 03:08:28 -0000
@@ -124,17 +124,17 @@ extern PRBool SEC_PKCS7VerifySignature(S
  *	The verification checks that the signing cert is valid and trusted
  *	for the purpose specified by "certusage".
  *
  *	In addition, if "keepcerts" is true, add any new certificates found
  *	into our local database.
  */
 extern PRBool SEC_PKCS7VerifyDetachedSignature(SEC_PKCS7ContentInfo *cinfo,
 					       SECCertUsage certusage,
-					       SECItem *detached_digest,
+					       const SECItem *detached_digest,
 					       HASH_HashType digest_type,
 					       PRBool keepcerts);
 
 /*
  * SEC_PKCS7GetSignerCommonName, SEC_PKCS7GetSignerEmailAddress
  *      The passed-in contentInfo is espected to be Signed, and these
  *      functions return the specified portion of the full signer name.
  *
Index: mozilla/security/nss/lib/util/base64.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/base64.h,v
retrieving revision 1.4
diff -u -8 -p -r1.4 base64.h
--- mozilla/security/nss/lib/util/base64.h	25 Apr 2012 14:50:16 -0000	1.4
+++ mozilla/security/nss/lib/util/base64.h	27 Nov 2012 03:08:29 -0000
@@ -26,17 +26,17 @@ extern char *BTOA_DataToAscii(const unsi
 ** Return an PORT_Alloc'd string which is the base64 decoded version
 ** of the input string; set *lenp to the length of the returned data.
 */
 extern unsigned char *ATOB_AsciiToData(const char *string, unsigned int *lenp);
  
 /*
 ** Convert from ascii to binary encoding of an item.
 */
-extern SECStatus ATOB_ConvertAsciiToItem(SECItem *binary_item, char *ascii);
+extern SECStatus ATOB_ConvertAsciiToItem(SECItem *binary_item, const char *ascii);
 
 /*
 ** Convert from binary encoding of an item to ascii.
 */
 extern char *BTOA_ConvertItemToAscii(SECItem *binary_item);
 
 SEC_END_PROTOS
 
Index: mozilla/security/nss/lib/util/nssb64d.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/nssb64d.c,v
retrieving revision 1.9
diff -u -8 -p -r1.9 nssb64d.c
--- mozilla/security/nss/lib/util/nssb64d.c	25 Apr 2012 14:50:16 -0000	1.9
+++ mozilla/security/nss/lib/util/nssb64d.c	27 Nov 2012 03:08:29 -0000
@@ -804,17 +804,17 @@ ATOB_AsciiToData(const char *string, uns
     *lenp = dummy->len;
     return dummy->data;
 }
  
 /*
 ** Convert from ascii to binary encoding of an item.
 */
 SECStatus
-ATOB_ConvertAsciiToItem(SECItem *binary_item, char *ascii)
+ATOB_ConvertAsciiToItem(SECItem *binary_item, const char *ascii)
 {
     SECItem *dummy;
 
     if (binary_item == NULL) {
 	PORT_SetError (SEC_ERROR_INVALID_ARGS);
 	return SECFailure;
     }
 
