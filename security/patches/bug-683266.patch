Index: mozilla/security/nss/lib/ckfw/builtins/Makefile
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/Makefile,v
retrieving revision 1.21
diff -u -8 -p -r1.21 Makefile
--- mozilla/security/nss/lib/ckfw/builtins/Makefile	25 Apr 2012 14:49:29 -0000	1.21
+++ mozilla/security/nss/lib/ckfw/builtins/Makefile	29 Nov 2012 01:53:17 -0000
@@ -39,10 +39,16 @@ EXTRA_SHARED_LIBS += \
 	-lnspr4 \
 	$(NULL)
 endif
 
 
 include $(CORE_DEPTH)/coreconf/rules.mk
 
 # Generate certdata.c.
-generate:
-	$(PERL) certdata.perl < certdata.txt
+
+# By default, use the unmodified certdata.txt.
+ifndef NSS_CERTDATA_TXT
+NSS_CERTDATA_TXT = certdata.txt
+endif
+
+$(OBJDIR)/certdata.c: $(NSS_CERTDATA_TXT) certdata.perl
+	$(PERL) certdata.perl < $(NSS_CERTDATA_TXT) > $@
Index: mozilla/security/nss/lib/ckfw/builtins/README
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/README,v
retrieving revision 1.5
diff -u -8 -p -r1.5 README
--- mozilla/security/nss/lib/ckfw/builtins/README	13 Apr 2005 01:45:53 -0000	1.5
+++ mozilla/security/nss/lib/ckfw/builtins/README	29 Nov 2012 01:53:17 -0000
@@ -15,34 +15,31 @@ environment variable. Then, add the dire
 libraries (DLLs) reside to the platform-specific environment variable that
 specifies your shared library search path: LD_LIBRARY_PATH (most Unix
 variants), SHLIB_PATH (32-bit HP-UX), LIBPATH (AIX), or PATH (Windows).
 
 2. Copy newroot.der to this directory.
 
 3. In this directory, run addbuiltin to add the new root certificate. The
 argument to the -n option should be replaced by the nickname of the root
-certificate. Then run "gmake generate".
+certificate.
 
     % addbuiltin -n "Nickname of the Root Certificate" -t C,C,C < newroot.der >> certdata.txt
-    % gmake generate
 
 4. Edit nssckbi.h to bump the version of the module.
 
 5. Run gmake in this directory to build the nssckbi module.
 
 6. After you verify that the new nssckbi module is correct, check in
-certdata.txt, certdata.c, and nssckbi.h.
+certdata.txt and nssckbi.h.
 
 II. Removing a Builtin Root CA Certificate
 
 1. Change directory to this directory.
 
 2. Edit certdata.txt and remove the root CA certificate.
 
-3. Run "gmake generate".
+3. Edit nssckbi.h to bump the version of the module.
 
-4. Edit nssckbi.h to bump the version of the module.
-
-5. Run gmake in this directory to build the nssckbi module.
+4. Run gmake in this directory to build the nssckbi module.
 
-6. After you verify that the new nssckbi module is correct, check in
-certdata.txt, certdata.c, and nssckbi.h.
+5. After you verify that the new nssckbi module is correct, check in
+certdata.txt and nssckbi.h.
Index: mozilla/security/nss/lib/ckfw/builtins/certdata.perl
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/certdata.perl,v
retrieving revision 1.15
diff -u -8 -p -r1.15 certdata.perl
--- mozilla/security/nss/lib/ckfw/builtins/certdata.perl	4 Jul 2012 15:21:49 -0000	1.15
+++ mozilla/security/nss/lib/ckfw/builtins/certdata.perl	29 Nov 2012 01:53:17 -0000
@@ -20,17 +20,16 @@ $constants{CK_FALSE} = "static const CK_
 while(<>) {
   my @fields = ();
   my $size;
 
   s/^((?:[^"#]+|"[^"]*")*)(\s*#.*$)/$1/;
   next if (/^\s*$/);
 
   if( /(^CVS_ID\s+)(.*)/ ) {
-#    print "The CVS ID is $2\n";
     $cvsid = $2 . "\"; $cvs_id\"";
     my $scratch = $cvsid;
     $size = 1 + $scratch =~ s/[^"\n]//g;
     @{$objects[0][0]} = ( "CKA_CLASS", "&cko_data", "sizeof(CK_OBJECT_CLASS)" );
     @{$objects[0][1]} = ( "CKA_TOKEN", "&ck_true", "sizeof(CK_BBOOL)" );
     @{$objects[0][2]} = ( "CKA_PRIVATE", "&ck_false", "sizeof(CK_BBOOL)" );
     @{$objects[0][3]} = ( "CKA_MODIFIABLE", "&ck_false", "sizeof(CK_BBOOL)" );
     @{$objects[0][4]} = ( "CKA_LABEL", "\"CVS ID\"", "7" );
@@ -124,112 +123,109 @@ for( $i = 0; $i <= $count; $i++ ) {
   }
 }
 
 }
 
 sub doprint {
 my $i;
 
-open(CFILE, ">certdata.c") || die "Can't open certdata.c: $!";
-
-print CFILE <<EOD
+print <<EOD
 /* THIS IS A GENERATED FILE */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #ifdef DEBUG
 static const char CVS_ID[] = $cvsid;
 #endif /* DEBUG */
 
 #ifndef BUILTINS_H
 #include "builtins.h"
 #endif /* BUILTINS_H */
 
 EOD
     ;
 
 foreach $b (sort values(%constants)) {
-  print CFILE $b;
+  print $b;
 }
 
 for( $i = 0; $i <= $count; $i++ ) {
   if( 0 == $i ) {
-    print CFILE "#ifdef DEBUG\n";
+    print "#ifdef DEBUG\n";
   }
 
-  print CFILE "static const CK_ATTRIBUTE_TYPE nss_builtins_types_$i [] = {\n";
+  print "static const CK_ATTRIBUTE_TYPE nss_builtins_types_$i [] = {\n";
   $o = $objects[$i];
- # print STDOUT "type $i object $o \n";
   my @ob = @{$o};
   my $j;
   for( $j = 0; $j < @ob; $j++ ) {
     my $l = $ob[$j];
     my @a = @{$l};
-    print CFILE " $a[0]";
+    print " $a[0]";
     if( $j+1 != @ob ) {
-      print CFILE ", ";
+      print ", ";
     }
   }
-  print CFILE "\n};\n";
+  print "\n};\n";
 
   if( 0 == $i ) {
-    print CFILE "#endif /* DEBUG */\n";
+    print "#endif /* DEBUG */\n";
   }
 }
 
 for( $i = 0; $i <= $count; $i++ ) {
   if( 0 == $i ) {
-    print CFILE "#ifdef DEBUG\n";
+    print "#ifdef DEBUG\n";
   }
 
-  print CFILE "static const NSSItem nss_builtins_items_$i [] = {\n";
+  print "static const NSSItem nss_builtins_items_$i [] = {\n";
   $o = $objects[$i];
   my @ob = @{$o};
   my $j;
   for( $j = 0; $j < @ob; $j++ ) {
     my $l = $ob[$j];
     my @a = @{$l};
-    print CFILE "  { (void *)$a[1], (PRUint32)$a[2] }";
+    print "  { (void *)$a[1], (PRUint32)$a[2] }";
     if( $j+1 != @ob ) {
-      print CFILE ",\n";
+      print ",\n";
     } else {
-      print CFILE "\n";
+      print "\n";
     }
   }
-  print CFILE "};\n";
+  print "};\n";
 
   if( 0 == $i ) {
-    print CFILE "#endif /* DEBUG */\n";
+    print "#endif /* DEBUG */\n";
   }
 }
 
-print CFILE "\nbuiltinsInternalObject\n";
-print CFILE "nss_builtins_data[] = {\n";
+print "\nbuiltinsInternalObject\n";
+print "nss_builtins_data[] = {\n";
 
 for( $i = 0; $i <= $count; $i++ ) {
 
   if( 0 == $i ) {
-    print CFILE "#ifdef DEBUG\n";
+    print "#ifdef DEBUG\n";
   }
 
-  print CFILE "  { $objsize[$i], nss_builtins_types_$i, nss_builtins_items_$i, {NULL} }";
+  print "  { $objsize[$i], nss_builtins_types_$i, nss_builtins_items_$i, {NULL} }";
 
   if( $i == $count ) {
-    print CFILE "\n";
+    print "\n";
   } else {
-    print CFILE ",\n";
+    print ",\n";
   }
 
   if( 0 == $i ) {
-    print CFILE "#endif /* DEBUG */\n";
+    print "#endif /* DEBUG */\n";
   }
 }
 
-print CFILE "};\n";
+print "};\n";
 
-print CFILE "const PRUint32\n";
-print CFILE "#ifdef DEBUG\n";
-print CFILE "  nss_builtins_nObjects = $count+1;\n";
-print CFILE "#else\n";
-print CFILE "  nss_builtins_nObjects = $count;\n";
-print CFILE "#endif /* DEBUG */\n";
+print "const PRUint32\n";
+print "#ifdef DEBUG\n";
+print "  nss_builtins_nObjects = $count+1;\n";
+print "#else\n";
+print "  nss_builtins_nObjects = $count;\n";
+print "#endif /* DEBUG */\n";
 }
Index: mozilla/security/nss/lib/ckfw/builtins/config.mk
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/config.mk,v
retrieving revision 1.15
diff -u -8 -p -r1.15 config.mk
--- mozilla/security/nss/lib/ckfw/builtins/config.mk	25 Apr 2012 14:49:29 -0000	1.15
+++ mozilla/security/nss/lib/ckfw/builtins/config.mk	29 Nov 2012 01:53:17 -0000
@@ -19,16 +19,19 @@ ifeq (,$(filter-out WIN%,$(OS_TARGET)))
     RES = $(OBJDIR)/$(LIBRARY_NAME).res
     RESNAME = $(LIBRARY_NAME).rc
 endif
 
 ifdef BUILD_IDG
     DEFINES += -DNSSDEBUG
 endif
 
+# Needed for compilation of $(OBJDIR)/certdata.c
+INCLUDES += -I$(CORE_DEPTH)/nss/lib/ckfw/builtins
+
 #
 # To create a loadable module on Darwin, we must use -bundle.
 #
 ifeq ($(OS_TARGET),Darwin)
 ifndef USE_64
 DSO_LDOPTS = -bundle
 endif
 endif
